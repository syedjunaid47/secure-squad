
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { VulnerabilityReport as VulnerabilityReportType } from "@/types";
import { formatDistanceToNow } from "date-fns";
import { ChevronDown, ChevronUp, ShieldAlert, Shield, ExternalLink } from "lucide-react";
import { useState } from "react";

interface VulnerabilityReportProps {
  report: VulnerabilityReportType;
}

const VulnerabilityReport = ({ report }: VulnerabilityReportProps) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getSeverityBadge = (severity: VulnerabilityReportType["severity"]) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-destructive text-destructive-foreground">Critical</Badge>;
      case "high":
        return <Badge variant="outline" className="bg-destructive/10 text-destructive border-destructive/20">High</Badge>;
      case "medium":
        return <Badge variant="outline" className="bg-warning/10 text-warning border-warning/20">Medium</Badge>;
      case "low":
        return <Badge variant="outline" className="bg-info/10 text-info border-info/20">Low</Badge>;
      default:
        return null;
    }
  };

  const getStatusBadge = (status: VulnerabilityReportType["status"]) => {
    switch (status) {
      case "open":
        return <Badge variant="outline" className="bg-destructive/10 text-destructive border-destructive/20">Open</Badge>;
      case "in_progress":
        return <Badge variant="outline" className="bg-warning/10 text-warning border-warning/20">In Progress</Badge>;
      case "resolved":
        return <Badge variant="outline" className="bg-success/10 text-success border-success/20">Resolved</Badge>;
      case "false_positive":
        return <Badge variant="outline" className="bg-muted text-muted-foreground">False Positive</Badge>;
      default:
        return null;
    }
  };

  const getAttackVectorDisplay = (vector: VulnerabilityReportType["attackVector"]) => {
    switch (vector) {
      case "api_manipulation":
        return "API Manipulation";
      case "parameter_tampering":
        return "Parameter Tampering";
      case "coupon_stacking":
        return "Coupon Stacking";
      case "hidden_field_modification":
        return "Hidden Field Modification";
      default:
        return vector;
    }
  };

  return (
    <Card className={`overflow-hidden transition-all duration-300 animate-fade-in ${report.status === "resolved" || report.status === "false_positive" ? "opacity-70" : ""}`}>
      <div className={`h-1 ${report.severity === "critical" ? "bg-destructive" : report.severity === "high" ? "bg-destructive/70" : report.severity === "medium" ? "bg-warning" : "bg-info"}`} />
      <CardHeader className="p-4 pb-2">
        <div className="flex justify-between items-start mb-1">
          <CardTitle className="text-base font-medium">
            {getAttackVectorDisplay(report.attackVector)}
          </CardTitle>
          <div className="flex gap-2">
            {getSeverityBadge(report.severity)}
            {getStatusBadge(report.status)}
          </div>
        </div>
        <CardDescription>
          {report.websiteName}
        </CardDescription>
      </CardHeader>
      <CardContent className="p-4 pt-2">
        <p className="text-sm text-foreground mt-2 mb-3">
          {report.description}
        </p>
        
        <div className="flex justify-between items-center text-xs text-muted-foreground mb-1">
          <div className="flex items-center gap-1">
            {report.status === "resolved" ? (
              <Shield className="h-3.5 w-3.5 text-success" />
            ) : (
              <ShieldAlert className="h-3.5 w-3.5" />
            )}
            <span>Discovered {formatDistanceToNow(new Date(report.dateDiscovered), { addSuffix: true })}</span>
          </div>
          {report.dateResolved && (
            <div>Resolved {formatDistanceToNow(new Date(report.dateResolved), { addSuffix: true })}</div>
          )}
        </div>
        
        {isExpanded && (
          <div className="mt-4 pt-3 border-t text-sm">
            <h4 className="font-medium mb-2">Reproduction Steps:</h4>
            <ol className="list-decimal list-inside space-y-1 text-muted-foreground">
              {report.steps.map((step, index) => (
                <li key={index}>{step}</li>
              ))}
            </ol>
          </div>
        )}
      </CardContent>
      <CardFooter className="p-3 pt-0 flex justify-between gap-3">
        <Button 
          variant="ghost" 
          size="sm" 
          className="text-xs flex-1"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <>
              <ChevronUp className="h-3.5 w-3.5 mr-1" /> Hide Details
            </>
          ) : (
            <>
              <ChevronDown className="h-3.5 w-3.5 mr-1" /> View Details
            </>
          )}
        </Button>
        <Button variant="outline" size="sm" className="text-xs flex-1">
          <ExternalLink className="h-3.5 w-3.5 mr-1" /> View Website
        </Button>
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityReport;
